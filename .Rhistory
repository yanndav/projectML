vignette("leebounds")
install_github("vsemenova/leebounds")
library(leebounds)
leedata=data.frame(treat=data$treatment,selection=data$follow_up,data$QEntrep_total)
GetBounds(leebounds(leedata))
leedata=data.frame(treat=data$treatment,selection=data$follow_up,data$REntrep_total)
GetBounds(leebounds(leedata))
data[data$age!=.,]
data[data$age!=0,]
nrow(data[data$age!=0,])
nrwo(data)
nrow(data)
GetBounds(leebounds(leedata))
sum(is.na(selection=data$follow_up))
sum(is.na(data$follow_up))
sum(is.na(data$REntrep_total))
d<-leedata$treat
s<-leedata$selection
sy<-leedata$outcome
if ("weights" %in% colnames(leedata)) {
weights<-leedata$weights
} else {
weights<-rep(1,length(d))
}
# s: binary (1/0)selection
# sy: outcome; sy=0 if selection s=0, sy=y otherwise
# normalize weights; assume weights are positive
treat_size<-sum(d==1)
control_size<-sum(d==0)
prop_control_nonmissing<-weighted.mean(s[d==0]==1,weights[d==0])
prop_treat_nonmissing<-weighted.mean(s[d==1]==1,weights[d==1])
p0<-prop_control_nonmissing/prop_treat_nonmissing
#print(p0)
if (!is.null(treat_helps)) {
if (treat_helps==TRUE) {
p0<-sapply(p0,min,1)
}
if (treat_helps==FALSE) {
p0<-sapply(p0,max,1)
}
}
if (prop_treat_nonmissing==0|is.na(p0)) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
}
if (p0<=1) {
trim_group_inds<-(d==1)
nontrim_group_inds<-(d==0)
p0_star = p0
} else {
p0_star = 1/p0
trim_group_inds<-(d==0)
nontrim_group_inds<-(d==1)
}
flag_NA<-FALSE
if (sum(trim_group_inds &s==1)==0) {
# stop("No identification: no observed data in trimmed group")
flag_NA<-TRUE
}
if (sum(nontrim_group_inds  &s==1)==0) {
flag_NA<-TRUE
# stop("No identification: no observed data in nontrimmed group")
}
if (flag_NA) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
} else {
y_trim<-sy[trim_group_inds &s==1]
y_nontrim<-sy[nontrim_group_inds & s==1]
weights_trim<-weights[trim_group_inds &s==1]
if ("weights" %in% colnames(leedata)) {
yp0<-reldist::wtd.quantile(y_trim,q=p0_star,weight=weights[trim_group_inds &s==1])
y1p0<-reldist::wtd.quantile(y_trim,q=1-p0_star,weight=weights[trim_group_inds &s==1])
} else {
yp0<-stats::quantile(y_trim,p0_star)
y1p0<-stats::quantile(y_trim,1-p0_star)
}
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
trimmed_mean_lower<-weighted.mean(y_trim[y_trim<=yp0],weights_trim[ y_trim<=yp0])
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}
else {
upper_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_lower
lower_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_upper
}
leebounds_result<-list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect)
return(list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect,p0=prop_control_nonmissing/prop_treat_nonmissing,
trimmed_mean_upper=trimmed_mean_upper,trimmed_mean_lower=trimmed_mean_lower,
mean_no_trim=mean(y_nontrim),
odds=treat_size/control_size,
yp0=yp0,
y1p0=y1p0,
s0=prop_control_nonmissing,
s1=prop_treat_nonmissing,
prop0=mean(d==0),
prop1=mean(d==1)))
}
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
trimmed_mean_lower<-weighted.mean(y_trim[y_trim<=yp0],weights_trim[ y_trim<=yp0])
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
y_trim<-sy[trim_group_inds &s==1]
y_nontrim<-sy[nontrim_group_inds & s==1]
y_trim
y_nontrim
sy
sy<-leedata$outcome
sy
leedata$outcome
leedata=data.frame(treat=data$treatment,selection=data$follow_up,outcome=data$REntrep_total)
GetBounds(leebounds(leedata))
leebounds(leedata)
leedata=data.frame(treat=data$treatment,selection=data$follow_up,outcome=data$REntrep_total)
GetBounds(leebounds(leedata))
?leebounds
# print(treat_helps)
d<-leedata$treat
s<-leedata$selection
sy<-leedata$outcome
if ("weights" %in% colnames(leedata)) {
weights<-leedata$weights
} else {
weights<-rep(1,length(d))
}
# s: binary (1/0)selection
# sy: outcome; sy=0 if selection s=0, sy=y otherwise
# normalize weights; assume weights are positive
treat_size<-sum(d==1)
control_size<-sum(d==0)
prop_control_nonmissing<-weighted.mean(s[d==0]==1,weights[d==0])
prop_treat_nonmissing<-weighted.mean(s[d==1]==1,weights[d==1])
p0<-prop_control_nonmissing/prop_treat_nonmissing
#print(p0)
if (!is.null(treat_helps)) {
if (treat_helps==TRUE) {
p0<-sapply(p0,min,1)
}
if (treat_helps==FALSE) {
p0<-sapply(p0,max,1)
}
}
if (prop_treat_nonmissing==0|is.na(p0)) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
}
if (p0<=1) {
trim_group_inds<-(d==1)
nontrim_group_inds<-(d==0)
p0_star = p0
} else {
p0_star = 1/p0
trim_group_inds<-(d==0)
nontrim_group_inds<-(d==1)
}
flag_NA<-FALSE
if (sum(trim_group_inds &s==1)==0) {
# stop("No identification: no observed data in trimmed group")
flag_NA<-TRUE
}
if (sum(nontrim_group_inds  &s==1)==0) {
flag_NA<-TRUE
# stop("No identification: no observed data in nontrimmed group")
}
if (flag_NA) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
} else {
y_trim<-sy[trim_group_inds &s==1]
y_nontrim<-sy[nontrim_group_inds & s==1]
weights_trim<-weights[trim_group_inds &s==1]
if ("weights" %in% colnames(leedata)) {
yp0<-reldist::wtd.quantile(y_trim,q=p0_star,weight=weights[trim_group_inds &s==1])
y1p0<-reldist::wtd.quantile(y_trim,q=1-p0_star,weight=weights[trim_group_inds &s==1])
} else {
yp0<-stats::quantile(y_trim,p0_star)
y1p0<-stats::quantile(y_trim,1-p0_star)
}
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
trimmed_mean_lower<-weighted.mean(y_trim[y_trim<=yp0],weights_trim[ y_trim<=yp0])
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}
else {
upper_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_lower
lower_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_upper
}
leebounds_result<-list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect)
return(list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect,p0=prop_control_nonmissing/prop_treat_nonmissing,
trimmed_mean_upper=trimmed_mean_upper,trimmed_mean_lower=trimmed_mean_lower,
mean_no_trim=mean(y_nontrim),
odds=treat_size/control_size,
yp0=yp0,
y1p0=y1p0,
s0=prop_control_nonmissing,
s1=prop_treat_nonmissing,
prop0=mean(d==0),
prop1=mean(d==1)))
}
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
yp0<-stats::quantile(y_trim,p0_star)
p0_star
y_trim
yp0<-stats::quantile(y_trim,p0_star)
yp0<-stats::quantile(y_trim,p0_star,na.rm=T)
y1p0<-stats::quantile(y_trim,1-p0_star,na.rm=T)
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
trimmed_mean_lower<-weighted.mean(y_trim[y_trim<=yp0],weights_trim[ y_trim<=yp0])
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}
else {
upper_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_lower
lower_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_upper
}
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}else {
upper_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_lower
lower_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_upper
}
leebounds_result<-list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect)
leedata=data.frame(treat=data$treatment,selection=data$follow_up,outcome=data$REntrep_total)
leebounds<-function(leedata,treat_helps=NULL,...) {
# print(treat_helps)
d<-leedata$treat
s<-leedata$selection
sy<-leedata$outcome
if ("weights" %in% colnames(leedata)) {
weights<-leedata$weights
} else {
weights<-rep(1,length(d))
}
# s: binary (1/0)selection
# sy: outcome; sy=0 if selection s=0, sy=y otherwise
# normalize weights; assume weights are positive
treat_size<-sum(d==1)
control_size<-sum(d==0)
prop_control_nonmissing<-weighted.mean(s[d==0]==1,weights[d==0])
prop_treat_nonmissing<-weighted.mean(s[d==1]==1,weights[d==1])
p0<-prop_control_nonmissing/prop_treat_nonmissing
#print(p0)
if (!is.null(treat_helps)) {
if (treat_helps==TRUE) {
p0<-sapply(p0,min,1)
}
if (treat_helps==FALSE) {
p0<-sapply(p0,max,1)
}
}
if (prop_treat_nonmissing==0|is.na(p0)) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
}
if (p0<=1) {
trim_group_inds<-(d==1)
nontrim_group_inds<-(d==0)
p0_star = p0
} else {
p0_star = 1/p0
trim_group_inds<-(d==0)
nontrim_group_inds<-(d==1)
}
flag_NA<-FALSE
if (sum(trim_group_inds &s==1)==0) {
# stop("No identification: no observed data in trimmed group")
flag_NA<-TRUE
}
if (sum(nontrim_group_inds  &s==1)==0) {
flag_NA<-TRUE
# stop("No identification: no observed data in nontrimmed group")
}
if (flag_NA) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
} else {
y_trim<-sy[trim_group_inds &s==1]
y_nontrim<-sy[nontrim_group_inds & s==1]
weights_trim<-weights[trim_group_inds &s==1]
if ("weights" %in% colnames(leedata)) {
yp0<-reldist::wtd.quantile(y_trim,q=p0_star,weight=weights[trim_group_inds &s==1])
y1p0<-reldist::wtd.quantile(y_trim,q=1-p0_star,weight=weights[trim_group_inds &s==1])
} else {
yp0<-stats::quantile(y_trim,p0_star,na.rm=T)
y1p0<-stats::quantile(y_trim,1-p0_star,na.rm=T)
}
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
trimmed_mean_lower<-weighted.mean(y_trim[y_trim<=yp0],weights_trim[ y_trim<=yp0])
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}else {
upper_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_lower
lower_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_upper
}
leebounds_result<-list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect)
return(list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect,p0=prop_control_nonmissing/prop_treat_nonmissing,
trimmed_mean_upper=trimmed_mean_upper,trimmed_mean_lower=trimmed_mean_lower,
mean_no_trim=mean(y_nontrim),
odds=treat_size/control_size,
yp0=yp0,
y1p0=y1p0,
s0=prop_control_nonmissing,
s1=prop_treat_nonmissing,
prop0=mean(d==0),
prop1=mean(d==1)))
}
}
GetBounds(leebounds(leedata))
leedata
leebounds(leedata)
# s: binary (1/0)selection
# sy: outcome; sy=0 if selection s=0, sy=y otherwise
# normalize weights; assume weights are positive
treat_size<-sum(d==1)
control_size<-sum(d==0)
prop_control_nonmissing<-weighted.mean(s[d==0]==1,weights[d==0])
prop_treat_nonmissing<-weighted.mean(s[d==1]==1,weights[d==1])
p0<-prop_control_nonmissing/prop_treat_nonmissing
#print(p0)
if (!is.null(treat_helps)) {
if (treat_helps==TRUE) {
p0<-sapply(p0,min,1)
}
if (treat_helps==FALSE) {
p0<-sapply(p0,max,1)
}
}
if (prop_treat_nonmissing==0|is.na(p0)) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
}
if (p0<=1) {
trim_group_inds<-(d==1)
nontrim_group_inds<-(d==0)
p0_star = p0
} else {
p0_star = 1/p0
trim_group_inds<-(d==0)
nontrim_group_inds<-(d==1)
}
flag_NA<-FALSE
if (sum(trim_group_inds &s==1)==0) {
# stop("No identification: no observed data in trimmed group")
flag_NA<-TRUE
}
if (sum(nontrim_group_inds  &s==1)==0) {
flag_NA<-TRUE
# stop("No identification: no observed data in nontrimmed group")
}
if (flag_NA) {
leebounds_result=list(lower_bound=NA,upper_bound=NA)
return(leebounds_result)
} else {
y_trim<-sy[trim_group_inds &s==1]
y_nontrim<-sy[nontrim_group_inds & s==1]
weights_trim<-weights[trim_group_inds &s==1]
if ("weights" %in% colnames(leedata)) {
yp0<-reldist::wtd.quantile(y_trim,q=p0_star,weight=weights[trim_group_inds &s==1])
y1p0<-reldist::wtd.quantile(y_trim,q=1-p0_star,weight=weights[trim_group_inds &s==1])
} else {
yp0<-stats::quantile(y_trim,p0_star,na.rm=T)
y1p0<-stats::quantile(y_trim,1-p0_star,na.rm=T)
}
trimmed_mean_upper<-weighted.mean(y_trim[y_trim>=y1p0],weights_trim[y_trim>=y1p0])
trimmed_mean_lower<-weighted.mean(y_trim[y_trim<=yp0],weights_trim[ y_trim<=yp0])
if (p0<=1) {
upper_bound_effect<- trimmed_mean_upper-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
lower_bound_effect<- trimmed_mean_lower-weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
}else {
upper_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_lower
lower_bound_effect<- weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])-trimmed_mean_upper
}
leebounds_result<-list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect)
return(list(lower_bound=lower_bound_effect,upper_bound=upper_bound_effect,p0=prop_control_nonmissing/prop_treat_nonmissing,
trimmed_mean_upper=trimmed_mean_upper,trimmed_mean_lower=trimmed_mean_lower,
mean_no_trim=mean(y_nontrim),
odds=treat_size/control_size,
yp0=yp0,
y1p0=y1p0,
s0=prop_control_nonmissing,
s1=prop_treat_nonmissing,
prop0=mean(d==0),
prop1=mean(d==1)))
}
lower_bound_effect
weighted.mean(y_nontrim,weights[ nontrim_group_inds & s==1])
midline = data %>% filter(!is.na(REntrep_total))
nrow(midline)
leedata=data.frame(treat=midline$treatment,selection=midline$follow_up,outcome=midline$REntrep_total)
GetBounds(leebounds(leedata))
library(leebounds)
midline = data %>% filter(!is.na(REntrep_total))
leedata=data.frame(treat=midline$treatment,selection=midline$follow_up,outcome=midline$REntrep_total)
GetBounds(leebounds(leedata))
midline = data %>% filter(!is.na(REntrep_total, age!=0))
midline = data %>% filter(!is.na(REntrep_total & age!=0))
nrow(age)
nrow(midline)
leedata=data.frame(treat=midline$treatment,selection=midline$follow_up,outcome=midline$REntrep_total)
GetBounds(leebounds(leedata))
leebounds(leedata)
endline = data %>% filter(!is.na(QEntrep_total & age!=0))
leedata=data.frame(treat=midline$treatment,selection=midline$endline,outcome=midline$QEntrep_total)
GetBounds(leebounds(leedata))
endline = data %>% filter(!is.na(QEntrep_total & age!=0))
leedata=data.frame(treat=endline$treatment,selection=endline$endline,outcome=endline$QEntrep_total)
GetBounds(leebounds(leedata))
# 00. PACKAGES AND DATA LOADING -------------------------------------------
## 00.1. LOADING PACKAGES
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart", "rpart.plot", "randomForest", "devtools", "tidyverse",
"knitr", "SuperLearner", "caret", "xgboost","stargazer","xtable",'haven')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
# install causalTree package from Susan Athey's github
#install_github('susanathey/causalTree')
library(causalTree)
## 00.2. DATA LOADING
# Setting working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Checking correct path loaded:
getwd()
# Loading cleaned dataset
data = read_dta('ELA.dta')
# Checking column names
# Checking column names
colnames(data)
# 00. PACKAGES AND DATA LOADING -------------------------------------------
## 00.1. LOADING PACKAGES
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart", "rpart.plot", "randomForest", "devtools", "tidyverse",
"knitr", "SuperLearner", "caret", "xgboost","stargazer","xtable",'haven','labeller')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
# 00. PACKAGES AND DATA LOADING -------------------------------------------
## 00.1. LOADING PACKAGES
# Installs packages if not already installed, then loads packages
list.of.packages <- c("glmnet", "rpart", "rpart.plot", "randomForest", "devtools", "tidyverse",
"knitr", "SuperLearner", "caret", "xgboost","stargazer","xtable",'haven','labelled')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos = "http://cran.us.r-project.org")
invisible(lapply(list.of.packages, library, character.only = TRUE))
colnames(data)
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
tapply(colnames(data), function(k){
return(c(k, var_label(data[[k]])))
})
k = colnames(data)[1]
data[[k]]
var_label(data[[k]])
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
sapply(colnames(data), function(k){
return(c(k, var_label(data[[k]])))
})
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
sapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
})
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
tapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
})
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
apply(colnames(data), function(k){
c(k, var_label(data[[k]]))
})
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
do.call(cbind(lapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
})))
lapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
})
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
do.call(cbind,lapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
})))
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
do.call(cbind,lapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
}))
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
do.call(rbind,lapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
}))
# 00.3. DATA PREPARATION --------------------------------------------------
# Finding controls variables to add:
variables_labels = do.call(rbind,lapply(colnames(data), function(k){
c(k, var_label(data[[k]]))
}))
View(variables_labels)
